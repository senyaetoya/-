# -*- coding: utf-8 -*-
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 19, 2019 02:27:57 PM MSK  platform: Linux
import sys

from project.python import alexandra_support
from project.python.int_linear_main import integer_lp

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
    from tkinter import BooleanVar
    from tkinter import filedialog
try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True


from tkinter import messagebox
import os.path


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    sys.stdout.flush()
    root = tk.Tk()
    top = Toplevel1(root)
    alexandra_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    alexandra_support.init(w, top, *args, **kwargs)
    return w, top


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = 'white'  #
        _fgcolor = 'black'  #
        _compcolor = 'white'  #
        _ana1color = 'white'  #
        _ana2color = '#ddd'  # light-gray

        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("800x652+611+181")
        top.resizable(width=False, height=False)
        top.title("Задачи линейного программирования")
        top.configure(highlightcolor="black")

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                                {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
             {"sticky": "nswe",
              "children": [
                  ("ClosetabNotebook.padding", {
                      "side": "top",
                      "sticky": "nswe",
                      "children": [
                          ("ClosetabNotebook.focus", {
                              "side": "top",
                              "sticky": "nswe",
                              "children": [
                                  ("ClosetabNotebook.label", {"side":
                                                                  "left", "sticky": ''}),
                                  ("ClosetabNotebook.close", {"side":
                                                                  "left", "sticky": ''}), ]})]})]})])

        PNOTEBOOK = "ClosetabNotebook"

        '''tk callbacks'''
        def open_file():
            file = filedialog.askopenfilename(filetypes=(('excel file', '*.xls'), ('excel file', '*.xlsx'),
                                                         ('excel file', '*.xlsm')))
            if file is not None:
                filename.set(file.rpartition('/')[2])
                filepath.set(file)

        def call_linear_prog(filepath, zadacha):
            if filepath == '':
                messagebox.showinfo('Ошибка', 'Вы не выбрали файл')
            else:
                coeffs = {'sort': self.sort_var.get(),
                          'zadacha': zadacha}
                if zadacha == 1:
                    coeffs['T'] = int(self.T_entry_p1.get())
                    coeffs['F'] = float(self.F_entry_p1.get())
                elif zadacha == 2:
                    coeffs['T'] = int(self.T_entry_p2.get())
                    coeffs['F'] = float(self.F_entry_p2.get())
                    coeffs['D'] = float(self.D_entry_p2.get())
                    coeffs['y'] = float(self.y_entry_p2.get())
                for coeff, value in coeffs.items():
                    if value == '':
                        return messagebox.showinfo('Ошибка', 'Введены не все коэффициенты')
                results = integer_lp(filepath, **coeffs)
                messagebox.showinfo('Решение', "\n".join(results))

        '''tk variables'''
        self.sort_var = tk.StringVar()
        self.sort_var.set('b/a')
        #  кнопки открытия файла и запуска расчетов
        filename = tk.StringVar()
        filepath = tk.StringVar()
        #  коэффициенты в entry
        F1 = tk.DoubleVar()
        F2 = tk.DoubleVar()
        T1 = tk.IntVar()
        T2 = tk.IntVar()
        D = tk.DoubleVar()
        y = tk.DoubleVar()
        F1.set(100000)
        F2.set(30000)
        T1.set(30)
        T2.set(1)
        D.set(0.4 * F2.get())
        y.set(0.125)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
        [('selected', _compcolor), ('active', _ana2color)])
        self.PNotebook1 = ttk.Notebook(top)
        self.PNotebook1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.PNotebook1.configure(width=300)
        self.PNotebook1.configure(style=PNOTEBOOK)

        self.PNotebook1_t0 = tk.Frame(self.PNotebook1, takefocus='1', background='white')
        self.PNotebook1.add(self.PNotebook1_t0, padding=3)
        self.PNotebook1.tab(0, text="Задача 1", compound="none", underline="-1")

        self.PNotebook1_t1 = tk.Frame(self.PNotebook1, takefocus='1', background='white')
        self.PNotebook1.add(self.PNotebook1_t1, padding=3)
        self.PNotebook1.tab(1, text="Задача 2", compound="none", underline="-1")

        self.formula1 = ttk.Label(self.PNotebook1_t0)
        self.formula1.place(relx=0.039, rely=0.02, height=239, width=720)
        self.formula1.configure(background="white")
        self.formula1.configure(foreground="#000000")
        self.formula1.configure(font="TkDefaultFont")
        self.formula1.configure(relief='flat')
        photo_location = os.path.join(prog_location, "./img/1.png")
        self._img_p1 = tk.PhotoImage(file=photo_location)
        self.formula1.configure(image=self._img_p1)

        self.Label_F = tk.Label(self.PNotebook1_t0)
        self.Label_F.place(relx=0.388, rely=0.52, height=30, width=42)
        self.Label_F.configure(background="white")
        self.Label_F.configure(font="-family {DejaVu Sans} -size 16")
        self.Label_F.configure(text='''F =''')

        self.F_entry_p1 = tk.Entry(self.PNotebook1_t0, textvariable=F1)
        self.F_entry_p1.place(relx=0.464, rely=0.51, height=43, relwidth=0.133)
        self.F_entry_p1.configure(background="white")
        self.F_entry_p1.configure(font="TkFixedFont")
        self.F_entry_p1.configure(selectbackground="#c4c4c4")

        self.Label_T = tk.Label(self.PNotebook1_t0)
        self.Label_T.place(relx=0.388, rely=0.61, height=30, width=42)
        self.Label_T.configure(background="white")
        self.Label_T.configure(font="-family {DejaVu Sans} -size 16")
        self.Label_T.configure(text='''T =''')

        self.T_entry_p1 = tk.Entry(self.PNotebook1_t0, textvariable=T1)
        self.T_entry_p1.place(relx=0.464, rely=0.60, height=43, relwidth=0.133)
        self.T_entry_p1.configure(background="white")
        self.T_entry_p1.configure(font="TkFixedFont")
        self.T_entry_p1.configure(selectbackground="#c4c4c4")

        self.Label1 = tk.Label(self.PNotebook1_t0)
        self.Label1.place(relx=0.05, rely=0.45, height=21, width=180)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Выберите сортировку:''')

        self.radio_sort_ba_p1 = tk.Radiobutton(self.PNotebook1_t0)
        self.radio_sort_ba_p1.place(relx=0.05, rely=0.52, relheight=0.037
                                    , relwidth=0.182)
        self.radio_sort_ba_p1.configure(justify='left')
        self.radio_sort_ba_p1.configure(text='β/α (max -> min)', background='white')
        self.radio_sort_ba_p1.configure(variable=self.sort_var, value='b/a')

        self.radio_sort_teta_p1 = tk.Radiobutton(self.PNotebook1_t0)
        self.radio_sort_teta_p1.place(relx=0.05, rely=0.58, relheight=0.037
                                      , relwidth=0.252)
        self.radio_sort_teta_p1.configure(justify='left', background='white')
        self.radio_sort_teta_p1.configure(text='интеграл θ (max -> min)')
        self.radio_sort_teta_p1.configure(variable=self.sort_var, value='teta')

        self.Label2 = tk.Label(self.PNotebook1_t0)
        self.Label2.place(relx=0.375, rely=0.45, height=21, width=195)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Введите коэффициенты:''')

        self.Label3 = tk.Label(self.PNotebook1_t0)
        self.Label3.place(relx=0.705, rely=0.45, height=21, width=185)
        self.Label3.configure(text='''Выберите файл excel:''')

        self.file_button_p1 = tk.Button(self.PNotebook1_t0, command=open_file)
        self.file_button_p1.place(relx=0.702, rely=0.52, height=41, width=191)
        self.file_button_p1.configure(width=191)
        self.file_button_p1.configure(background="#ffffff")
        self.file_button_p1.configure(relief='sunken', textvariable=filename)

        self.exe_button_p1 = ttk.Button(self.PNotebook1_t0)
        self.exe_button_p1.configure(command=lambda: call_linear_prog(filepath.get(), zadacha=1))
        self.exe_button_p1.place(relx=0.330, rely=0.820, height=70, width=250)
        self.exe_button_p1.configure(text='''Рассчитать''')

        '''вторая задача'''

        self.formula_p2 = ttk.Label(self.PNotebook1_t1)
        self.formula_p2.place(relx=0.1, rely=0.02, height=239, width=720)
        self.formula_p2.configure(background="white")
        self.formula_p2.configure(foreground="#000000")
        self.formula_p2.configure(font="TkDefaultFont")
        self.formula_p2.configure(relief='flat')
        photo_location2 = os.path.join(prog_location, "./img/2.png")
        self._img_p2 = tk.PhotoImage(file=photo_location2)
        self.formula_p2.configure(image=self._img_p2)

        self.Label_F_p2 = tk.Label(self.PNotebook1_t1)
        self.Label_F_p2.place(relx=0.388, rely=0.52, height=20, width=42)
        self.Label_F_p2.configure(background="white")
        self.Label_F_p2.configure(font="-family {DejaVu Sans} -size 16")
        self.Label_F_p2.configure(text='''F =''')

        self.F_entry_p2 = tk.Entry(self.PNotebook1_t1, textvariable=F2)
        self.F_entry_p2.place(relx=0.464, rely=0.51, height=33, relwidth=0.133)
        self.F_entry_p2.configure(background="white")
        self.F_entry_p2.configure(font="TkFixedFont")
        self.F_entry_p2.configure(selectbackground="#c4c4c4")

        self.Label_T_p2 = tk.Label(self.PNotebook1_t1)
        self.Label_T_p2.place(relx=0.388, rely=0.59, height=20, width=42)
        self.Label_T_p2.configure(background="white")
        self.Label_T_p2.configure(font="-family {DejaVu Sans} -size 16")
        self.Label_T_p2.configure(text='''T =''')

        self.T_entry_p2 = tk.Entry(self.PNotebook1_t1, textvariable=T2)
        self.T_entry_p2.place(relx=0.464, rely=0.58, height=33, relwidth=0.133)
        self.T_entry_p2.configure(background="white")
        self.T_entry_p2.configure(font="TkFixedFont")
        self.T_entry_p2.configure(selectbackground="#c4c4c4")

        self.Label_D_p2 = tk.Label(self.PNotebook1_t1)
        self.Label_D_p2.place(relx=0.388, rely=0.66, height=20, width=42)
        self.Label_D_p2.configure(background="white")
        self.Label_D_p2.configure(font="-family {DejaVu Sans} -size 16")
        self.Label_D_p2.configure(text='''D =''')

        self.D_entry_p2 = tk.Entry(self.PNotebook1_t1, textvariable=D)
        self.D_entry_p2.place(relx=0.464, rely=0.65, height=33, relwidth=0.133)
        self.D_entry_p2.configure(background="white")
        self.D_entry_p2.configure(font="TkFixedFont")
        self.D_entry_p2.configure(selectbackground="#c4c4c4")

        self.Label_y_p2 = tk.Label(self.PNotebook1_t1)
        self.Label_y_p2.place(relx=0.388, rely=0.72, height=30, width=42)
        self.Label_y_p2.configure(background="white")
        self.Label_y_p2.configure(font="-family {DejaVu Sans} -size 16")
        self.Label_y_p2.configure(text='''y =''')

        self.y_entry_p2 = tk.Entry(self.PNotebook1_t1, textvariable=y)
        self.y_entry_p2.place(relx=0.464, rely=0.72, height=33, relwidth=0.133)
        self.y_entry_p2.configure(background="white")
        self.y_entry_p2.configure(font="TkFixedFont")
        self.y_entry_p2.configure(selectbackground="#c4c4c4")

        self.Label_sort_p2 = tk.Label(self.PNotebook1_t1)
        self.Label_sort_p2.place(relx=0.05, rely=0.45, height=21, width=180)
        self.Label_sort_p2.configure(activebackground="#f9f9f9")
        self.Label_sort_p2.configure(text='''Выберите сортировку:''')

        self.radio_sort_ba_p2 = tk.Radiobutton(self.PNotebook1_t1)
        self.radio_sort_ba_p2.place(relx=0.05, rely=0.52, relheight=0.037
                                    , relwidth=0.182)
        self.radio_sort_ba_p2.configure(justify='left')
        self.radio_sort_ba_p2.configure(text='β/α (max -> min)', background='white')
        self.radio_sort_ba_p2.configure(variable=self.sort_var, value='b/a')

        self.radio_sort_teta_p2 = tk.Radiobutton(self.PNotebook1_t1)
        self.radio_sort_teta_p2.place(relx=0.05, rely=0.58, relheight=0.037
                                      , relwidth=0.252)
        self.radio_sort_teta_p2.configure(justify='left', background='white')
        self.radio_sort_teta_p2.configure(text='интеграл θ (max -> min)')
        self.radio_sort_teta_p2.configure(variable=self.sort_var, value='teta')

        self.Label_coef_p2 = tk.Label(self.PNotebook1_t1)
        self.Label_coef_p2.place(relx=0.375, rely=0.45, height=21, width=195)
        self.Label_coef_p2.configure(activebackground="#f9f9f9")
        self.Label_coef_p2.configure(text='''Введите коэффициенты:''')

        self.Label_file_p2 = tk.Label(self.PNotebook1_t1)
        self.Label_file_p2.place(relx=0.705, rely=0.45, height=21, width=185)
        self.Label_file_p2.configure(text='''Выберите файл excel:''')

        self.file_button_p2 = tk.Button(self.PNotebook1_t1, command=open_file)
        self.file_button_p2.place(relx=0.702, rely=0.52, height=41, width=191)
        self.file_button_p2.configure(width=191)
        self.file_button_p2.configure(background="#ffffff")
        self.file_button_p2.configure(relief='sunken', textvariable=filename)

        self.exe_button_p2 = ttk.Button(self.PNotebook1_t1)
        self.exe_button_p2.configure(command=lambda: call_linear_prog(filepath.get(), zadacha=2))
        self.exe_button_p2.place(relx=0.330, rely=0.820, height=70, width=250)
        self.exe_button_p2.configure(text='''Рассчитать''')


if __name__ == '__main__':
    vp_start_gui()
