#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 18, 2019 07:56:14 PM MSK  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

from проект.python import alexandra_support
import os.path


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    print('prog_call = {}'.format(prog_call))
    prog_location = os.path.split(prog_call)[0]
    print('prog_location = {}'.format(prog_location))
    sys.stdout.flush()
    root = tk.Tk()
    top = Toplevel1(root)
    alexandra_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    print('prog_call = {}'.format(prog_call))
    prog_location = os.path.split(prog_call)[0]
    print('prog_location = {}'.format(prog_location))
    rt = root
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    alexandra_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("916x652+611+181")
        top.title("New Toplevel")
        top.configure(highlightcolor="black")

        self.images = (

            tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                 KkoNUtRHpYYAADs= '''),

            tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),

            tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                 +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )

        self.style.element_create("close", "image", "img_close",
                                  ("active", "pressed", "!disabled", "img_closepressed"),
                                  ("active", "alternate", "!disabled",
                                   "img_closeactive"), border=8, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                                {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
             {"sticky": "nswe",
              "children": [
                  ("ClosetabNotebook.padding", {
                      "side": "top",
                      "sticky": "nswe",
                      "children": [
                          ("ClosetabNotebook.focus", {
                              "side": "top",
                              "sticky": "nswe",
                              "children": [
                                  ("ClosetabNotebook.label", {"side":
                                                                  "left", "sticky": ''}),
                                  ("ClosetabNotebook.close", {"side":
                                                                  "left", "sticky": ''}), ]})]})]})])

        PNOTEBOOK = "ClosetabNotebook"

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
        [('selected', _compcolor), ('active', _ana2color)])
        self.PNotebook1 = ttk.Notebook(top)
        self.PNotebook1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.PNotebook1.configure(width=300)
        self.PNotebook1.configure(style=PNOTEBOOK)
        self.PNotebook1_t0 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t0, padding=3)
        self.PNotebook1.tab(0, text="Page 1", compound="none", underline="-1", )
        self.PNotebook1_t0.configure(background="#ffffff")
        self.PNotebook1_t0.configure(highlightbackground="#d8d8d8")
        self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t1, padding=3)
        self.PNotebook1.tab(1, text="Page 2", compound="none", underline="-1", )

        self.TLabel2 = ttk.Label(self.PNotebook1_t0)
        self.TLabel2.place(relx=0.033, rely=0.032, height=239, width=720)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief='flat')
        self.TLabel2.configure(width=720)
        photo_location = os.path.join(prog_location, "./img/1.png")
        self._img0 = tk.PhotoImage(file=photo_location)
        self.TLabel2.configure(image=self._img0)

        self.Label6 = tk.Label(self.PNotebook1_t0)
        self.Label6.place(relx=0.055, rely=0.751, height=30, width=42)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(font="-family {DejaVu Sans} -size 16")
        self.Label6.configure(text='''T =''')

        self.Entry2 = tk.Entry(self.PNotebook1_t0)
        self.Entry2.place(relx=0.12, rely=0.655, height=43, relwidth=0.116)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(selectbackground="#c4c4c4")

        self.Entry2 = tk.Entry(self.PNotebook1_t0)
        self.Entry2.place(relx=0.12, rely=0.735, height=43, relwidth=0.116)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(selectbackground="#c4c4c4")

        self.Label6 = tk.Label(self.PNotebook1_t0)
        self.Label6.place(relx=0.055, rely=0.671, height=30, width=42)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(font="-family {DejaVu Sans} -size 16")
        self.Label6.configure(text='''F =''')

        self.TButton2 = ttk.Button(self.PNotebook1_t0)
        self.TButton2.place(relx=0.044, rely=0.863, height=58, width=170)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Рассчитать''')

        self.Canvas1 = tk.Canvas(self.PNotebook1_t0)
        self.Canvas1.place(relx=0.438, rely=0.511, relheight=0.369
                           , relwidth=0.461)
        self.Canvas1.configure(background="#ffffff")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#ffffff")
        self.Canvas1.configure(relief='ridge')
        self.Canvas1.configure(selectbackground="#ffffff")
        self.Canvas1.configure(width=421)

        self.Radiobutton1 = tk.Radiobutton(self.PNotebook1_t0)
        self.Radiobutton1.place(relx=0.044, rely=0.543, relheight=0.037
                                , relwidth=0.159)
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''β/α (max -> min)''')

        self.Radiobutton2 = tk.Radiobutton(self.PNotebook1_t0)
        self.Radiobutton2.place(relx=0.044, rely=0.591, relheight=0.037
                                , relwidth=0.22)
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(text='''интеграл θ (max -> min)''')

        self.Label1 = tk.Label(self.PNotebook1_t0)
        self.Label1.place(relx=0.044, rely=0.479, height=21, width=161)
        self.Label1.configure(text='''Выберите сортировку:''')

        self.Label2 = tk.Label(self.PNotebook1_t0)
        self.Label2.place(relx=0.438, rely=0.463, height=21, width=80)
        self.Label2.configure(text='''Результат:''')
        self.PNotebook1.bind('<Button-1>', _button_press)
        self.PNotebook1.bind('<ButtonRelease-1>', _button_release)
        self.PNotebook1.bind('<Motion>', _mouse_over)


# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index


def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
        return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None


def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])


if __name__ == '__main__':
    vp_start_gui()
